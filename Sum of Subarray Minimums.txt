class Solution {
    public int sumSubarrayMins(int[] arr) {
        int[] previous = pse(arr);
         int MOD = 1000000007;
        int[] next = nse(arr);
        long total=0;
        long p=0,n=0;
        for(int i=0;i<arr.length;i++){
           p = (long)i - previous[i];
           n = next[i] - (long)i;
           total = (total + (arr[i] * p  * n )% MOD)%MOD;
        }
        return (int)total;
    }

    public int[] pse(int[] arr){
        Stack<Integer> st = new Stack<>();
        int[] prev=new int[arr.length];
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[st.peek()]>=arr[i]){
                st.pop();
            }
            prev[i] = st.isEmpty() ? -1 : st.peek();
            st.push(i);
        }
        return prev;
    }

    public int[] nse(int[] arr){
        Stack<Integer> st = new Stack<>();
        int[] next=new int[arr.length];
        int n=arr.length;
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && arr[st.peek()]>arr[i]){
                st.pop();
            }
            next[i] = st.isEmpty() ? n : st.peek();
            st.push(i);
        }
        return next;
    }
}